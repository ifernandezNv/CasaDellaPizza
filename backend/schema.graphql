#Generic Types
type Preferences{
  alergies: [String],
  favoriteIngredients: [String]
}

type Address {
  street: String!
  block: String!
  houseNumber: String
}

type StatusResponse{
  status: Float!
  message: String!
}
type StatusResponseUserAuth{
  status: Float!
  message: String!
  id: String
  name: String
  email: String
  token: String
  userType: String
}
type StatusResponseIngredient{
  status: Float!
  message: String!
  id: String
  name: String
  pricePerPortion: Float
  image: String
  avaliable: Boolean
  zIndex: ZIndex
}
type StatusResponsePromotion{
  status: Float!
  message: String!
  id: String
  name: String
  price: Float
  image: String
  avaliable: Boolean
  endDate: String
  product: [Product]
}
type StatusResponseCreateOrder{
  status: Float!
  message: String!
  userId: String
  total: Float
  id: String
  products: [Product]
  address: Address
  statusOrder: String
}
type StatusResponseOrder{
  status: Float!
  message: String!
  id: String
}

type StatusResponseOrderStatusUpdate{
  status: Float!
  message: String!
}

type StatusResponseCreateProduct{
  status: Float!
  message: String!
  id: String
  name: String
  description: String
  category: String
  sizePiecesGrams: String
  ingredients: [IngredientXQuantity]
  image: String
  price: Float
}
type StatusResponseCreateUser{
  status: Float!
  message: String!
  id: String
  name: String
  email: String
}
type UserCredentials{
  _id: String!
  name: String!
  email: String!
  token: String!
}

type Quantity{
  quantity: Float
}

type IngredientXQuantity{
  name: String
  quantity: Float
}

enum ZIndex{
  one
  two
  three
}
enum Category{
  pizza
  postres
  pollo
  complementos
  dips
}
enum UserTypeEnum{
  user
  admin
}

enum OrderStatusEnum{
  pending
  received
  baking
  lastDetails
  onItsWay
}
union ImageRef = Product | Promotion | Ingredient
#Collection types
type User {
  id: ID
  name: String
  email: String
  confirmed: Boolean
  password: String
  preferences: Preferences
  orders: [Order]
  userType: UserTypeEnum
  address: Address
  phoneNumber: String
  createdAt: String
  checkPassword(password: String): Boolean
}

type IngredientQuantity{
  name: String
  quantity: Float
}

type Product {
  id: ID
  name: String
  description: String
  price: Float
  category: String
  sizePiecesGrams: String
  image: String
  ingredients: [IngredientQuantity]
}

type Promotion {
  id: ID
  name: String
  description: String
  endDate: String
  avaliable: Boolean
  price: Float
  importantDetail: String
  product: [Product]
  image: String
}

type Order {
  id: ID
  userId: String
  statusOrder: OrderStatusEnum
  address: Address
  products: [Product]
  date: String
  total: Float
}

type Ingredient{
  id: ID
  name: String!
  zIndex: ZIndex
  image: String
  pricePerPortion: Float
  avaliable: Boolean
}

type Category{
  id: ID
  name: String!
}

type Image{
  id: ID
  name: String!
  format: String!
  reference: ImageRef
  url: String!
}

input UserCredentialsInput{
  email: String!
  password: String!
}


# Queries
type Query {
  getUsers: [User]
  getUser(id: String): User
  authUser(userCredentialsInput: UserCredentialsInput): StatusResponseUserAuth!
  getProducts: [Product]
  getProduct(id: String): Product
  getComplements(categoryInput: String): [Product]
  getPizzas: [Product]
  getIngredients: [Ingredient]
  getDoughTypes: [Ingredient]
  getIngredient(name: String): Ingredient
  getPromotions: [Promotion]
  getPromotion(id: String): Promotion
  getOrders: [Order]
  getOrder(id: String): Order
  getCategories: [Category]
  getImages: [Image]
}

#Mutations
input UserInput{
  name: String
  email: String
  password: String
  preferences: ReferencesInput
  address: UserInputUpdateAddress
  phoneNumber: String
  userType: String
}
input ReferencesInput {
  alergies: [String],
  favoriteIngredients: [String]
}

input UpdateUserInput{
  name: String
  email: String
  password: String
  address: UserInputUpdateAddress
}

input UserInputUpdateAddress{
  street: String
  block: String
  houseNumber: String
}

input IngredientQuantityInput{
  id: String
  name: String
  quantity: Float
}

input ProductInput{
  id: String
  name: String
  category: String
  description: String
  price: Float
  sizePiecesGrams: String
  ingredients: [IngredientQuantityInput]
  image: String
}

input UpdatedProduct {
  product: ProductInput
  quantity: Float
}

input UpdatedPromotion {
  promotion: PromotionInput
  quantity: Float
}

input ProductsCartType {
  product: [UpdatedProduct]
  promotion: [UpdatedPromotion]
}


input OrderInput{
  userId: ID
  statusOrder: String
  address: UserInputUpdateAddress
  product: ProductsCartType
  date: String
  total: Float
}

input UpdateProductInput{
  id: String
  product: ProductInput
}

input IngredientInput{
  name: String!
  zIndex: ZIndex!
  image: String!
  pricePerPortion: Float!
  avaliable: Boolean!
}

input CategoryInput{
  name: String
}

input PromotionInput{
  id: String
  name: String
  description: String
  price: Float
  importantDetail: String
  endDate: String
  avaliable: Boolean
  product: [ProductInput]
  image: String
}

input ImageInput{
  name: String
  format: String
  reference: String
  url: String
}

type Mutation{
  createUser(userInput: UserInput): StatusResponseCreateUser!
  createProduct(productInput: ProductInput): StatusResponseCreateProduct!
  createIngredient(ingredientInput: IngredientInput): StatusResponseIngredient!
  createCategory(categoryInput: CategoryInput): StatusResponse!
  createPromotion(promotionInput: PromotionInput): StatusResponsePromotion!
  createImage(imageInput: ImageInput): StatusResponse!
  createOrder(orderInput: OrderInput): StatusResponseOrder!

  updateUserAddress(id: ID!, userInputUpdateAddress: UserInputUpdateAddress): StatusResponse!
  updateUser(id: ID!, updateUserInput: UpdateUserInput): StatusResponse!
  updateProduct(productInput: UpdateProductInput): StatusResponseCreateProduct! 
  updateIngredient(ingredientInput: IngredientInput): StatusResponse!
  updateCategory(categoryInput: CategoryInput): StatusResponse!
  updatePromotion(promotionInput: PromotionInput): StatusResponse!
  updateImage(imageInput: ImageInput): StatusResponse!
  updatePromotionStatus(promotionId: String): StatusResponse!
  updateOrderStatus(id: String, status: OrderStatusEnum): StatusResponseOrderStatusUpdate!

  deleteUser(id: ID!): StatusResponse!
  deleteProduct(id: ID!): StatusResponse!
  deleteIngredient(id: ID!): StatusResponse!
  deleteCategory(id: ID!): StatusResponse!
  deletePromotion(id: ID!): StatusResponse!
  deleteImage(id: ID!): StatusResponse!
}