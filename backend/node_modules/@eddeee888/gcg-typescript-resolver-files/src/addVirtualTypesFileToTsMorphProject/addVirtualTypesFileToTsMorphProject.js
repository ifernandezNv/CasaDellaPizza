"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addVirtualTypesFileToTsMorphProject = void 0;
const tslib_1 = require("tslib");
const addPlugin = require("@graphql-codegen/add");
const typeScriptPlugin = require("@graphql-codegen/typescript");
const typeScriptResolversPlugin = require("@graphql-codegen/typescript-resolvers");
const addVirtualTypesFileToTsMorphProject = ({ tsMorphProject, schemaAst, resolverTypesPath, resolverTypesConfig, addConfig, }) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const typesFile = yield generateVirtualTypesFile({
        schemaAst,
        resolverTypesPath,
        resolverTypesConfig,
        addConfig,
    });
    const typesSourceFile = tsMorphProject.createSourceFile(typesFile.filePath, typesFile.content, { overwrite: true });
    return typesSourceFile;
});
exports.addVirtualTypesFileToTsMorphProject = addVirtualTypesFileToTsMorphProject;
/**
 * getVirtualTypesFile generates a virtual types.generated.ts file
 * This is used to statically detect and compare types in the parse and post-process steps
 */
const generateVirtualTypesFile = ({ schemaAst, resolverTypesPath, resolverTypesConfig, addConfig, }) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    var _a, _b, _c, _d;
    const [typescriptResult, typescriptResolversResult, addResult] = yield Promise.all([
        typeScriptPlugin.plugin(schemaAst, [], resolverTypesConfig),
        typeScriptResolversPlugin.plugin(schemaAst, [], resolverTypesConfig),
        addConfig ? addPlugin.plugin(schemaAst, [], addConfig) : '',
    ]);
    const addResultAsComplextOutput = convertPluginOutputToComplextPluginOutput(addResult);
    return {
        filePath: resolverTypesPath,
        content: `
    ${(_a = addResultAsComplextOutput.prepend) === null || _a === void 0 ? void 0 : _a.join('\n')}
    ${(_b = typescriptResult.prepend) === null || _b === void 0 ? void 0 : _b.join('\n')}
    ${(_c = typescriptResolversResult.prepend) === null || _c === void 0 ? void 0 : _c.join('\n')}
    ${typescriptResult.content}
    ${typescriptResolversResult.content}
    ${addResultAsComplextOutput.content}
    ${(_d = addResultAsComplextOutput.append) === null || _d === void 0 ? void 0 : _d.join('\n')}
    `,
    };
});
const convertPluginOutputToComplextPluginOutput = (output) => {
    if (typeof output === 'string') {
        return {
            content: output || '',
        };
    }
    if (Array.isArray(output.content)) {
        output.content = output.content.join('\n');
    }
    return output;
};
//# sourceMappingURL=addVirtualTypesFileToTsMorphProject.js.map