"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleGraphQLObjectType = void 0;
const utils_1 = require("../utils");
const handleGraphQLObjectType = ({ fieldFilePath, resolverName, normalizedResolverName, resolversTypeMeta, moduleName, fieldsToPick = [], // If fieldsToPick.length === 0, it means the current object handles all resolvers
 }, { result, config: { resolverGeneration, graphQLObjectTypeResolversToGenerate, emitLegacyCommonJSImports, }, }) => {
    if (!resolverGeneration.object) {
        return;
    }
    // `typeString` contains the resolver type
    // If there's fieldsToPick, we must only pick said fields from the original resolver type
    const typeString = fieldsToPick.length > 0
        ? `Pick<${resolversTypeMeta.typeString}, ${fieldsToPick
            .map((fieldName) => `'${fieldName}'`)
            .join('|')}>`
        : resolversTypeMeta.typeString;
    // Array of all resolvers that may need type checking
    // If there's fieldsToPick, we must only generate said fields
    const allResolversToGenerate = graphQLObjectTypeResolversToGenerate[resolverName];
    const resolversToGenerate = fieldsToPick.length > 0
        ? fieldsToPick.reduce((res, fieldToPick) => {
            if (allResolversToGenerate) {
                res[fieldToPick] = allResolversToGenerate[fieldToPick];
            }
            return res;
        }, {})
        : allResolversToGenerate;
    const variableStatement = `export const ${resolverName}: ${typeString} = {
    /* Implement ${resolverName} resolver logic here */
  };`;
    result.files[fieldFilePath] = {
        __filetype: 'objectType',
        content: `
    ${(0, utils_1.printImportLine)({
            isTypeImport: true,
            module: resolversTypeMeta.module,
            moduleType: resolversTypeMeta.moduleType,
            namedImports: [resolversTypeMeta.typeNamedImport],
            emitLegacyCommonJSImports,
        })}
    ${variableStatement}`,
        mainImportIdentifier: resolverName,
        meta: {
            moduleName,
            normalizedResolverName,
            variableStatement,
            resolverTypeString: typeString,
            resolversToGenerate,
        },
    };
};
exports.handleGraphQLObjectType = handleGraphQLObjectType;
//# sourceMappingURL=handleGraphQLObjectType.js.map