import type { AddPluginConfig } from '@graphql-codegen/add/typings/config';
import * as typeScriptPlugin from '@graphql-codegen/typescript';
import * as typeScriptResolversPlugin from '@graphql-codegen/typescript-resolvers';
import type { ProjectOptions } from 'ts-morph';
type ParsedTypesPluginsConfig = Omit<typeScriptPlugin.TypeScriptPluginConfig & typeScriptResolversPlugin.TypeScriptResolversPluginConfig, 'scalars' | 'emitLegacyCommonJSImports'>;
type ConfigMode = 'merged' | 'modules';
type ResolverMainFileMode = 'merged' | 'modules';
export type TypeDefsFileMode = 'merged' | 'mergedWhitelisted' | 'modules';
type FixObjectTypeResolvers = 'smart' | 'disabled';
type ResolverGeneration = 'disabled' | 'recommended' | 'all';
export type ScalarsOverridesType = string | {
    input: string;
    output: string;
};
export interface ParsedPresetConfig {
    add?: Record<string, AddPluginConfig>;
    resolverTypesPath: string;
    resolverRelativeTargetDir: string;
    resolverMainFile: string;
    resolverMainFileMode: ResolverMainFileMode;
    resolverGeneration: {
        query: boolean;
        mutation: boolean;
        subscription: boolean;
        scalar: boolean;
        object: boolean;
        union: boolean;
        interface: boolean;
    };
    typeDefsFilePath: string | false;
    typeDefsFileMode: TypeDefsFileMode;
    mappersFileExtension: string;
    mappersSuffix: string;
    scalarsModule: string | false;
    scalarsOverrides: Record<string, {
        resolver?: string;
        type?: ScalarsOverridesType;
    }>;
    mode: ConfigMode;
    whitelistedModules: string[];
    blacklistedModules: string[];
    externalResolvers: Record<string, string>;
    typesPluginsConfig: ParsedTypesPluginsConfig;
    tsMorphProjectOptions: ProjectOptions;
    fixObjectTypeResolvers: FixObjectTypeResolvers;
    emitLegacyCommonJSImports: boolean;
}
export interface RawPresetConfig {
    add?: Record<string, unknown>;
    resolverTypesPath?: string;
    resolverRelativeTargetDir?: string;
    resolverMainFile?: string;
    resolverMainFileMode?: string;
    resolverGeneration?: string;
    typeDefsFilePath?: string | boolean;
    typeDefsFileMode?: string;
    mappersFileExtension?: string;
    mappersSuffix?: string;
    scalarsModule?: string | boolean;
    scalarsOverrides?: Record<string, {
        resolver?: string;
        type?: ScalarsOverridesType;
    }>;
    mode?: string;
    whitelistedModules?: string[];
    blacklistedModules?: string[];
    externalResolvers?: Record<string, string>;
    typesPluginsConfig?: typeScriptPlugin.TypeScriptPluginConfig & typeScriptResolversPlugin.TypeScriptResolversPluginConfig;
    tsConfigFilePath?: string;
    fixObjectTypeResolvers?: string;
    emitLegacyCommonJSImports?: boolean;
}
export interface TypedPresetConfig extends RawPresetConfig {
    add?: Record<string, AddPluginConfig>;
    mode?: ConfigMode;
    resolverMainFileMode?: ResolverMainFileMode;
    typeDefsFileMode?: TypeDefsFileMode;
    fixObjectTypeResolvers?: FixObjectTypeResolvers;
    typesPluginsConfig?: ParsedTypesPluginsConfig;
    resolverGeneration?: ResolverGeneration;
}
export declare const validatePresetConfig: ({ add, resolverTypesPath, resolverRelativeTargetDir, resolverMainFile, resolverMainFileMode, resolverGeneration, typeDefsFilePath, typeDefsFileMode: inputTypeDefsFileMode, mappersFileExtension, mappersSuffix, scalarsModule, scalarsOverrides, mode, whitelistedModules, blacklistedModules, externalResolvers, typesPluginsConfig, tsConfigFilePath, fixObjectTypeResolvers, emitLegacyCommonJSImports, }: RawPresetConfig) => ParsedPresetConfig;
export {};
