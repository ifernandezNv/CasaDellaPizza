"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validate = exports.addToSchema = exports.DIRECTIVES = exports.plugin = void 0;
const tslib_1 = require("tslib");
const path_1 = require("path");
const graphql_tag_1 = tslib_1.__importDefault(require("graphql-tag"));
const plugin_helpers_1 = require("@graphql-codegen/plugin-helpers");
const config_js_1 = require("./config.js");
const visitor_js_1 = require("./visitor.js");
const plugin = (schema, documents, config) => {
    const visitor = new visitor_js_1.TsMongoVisitor(schema, config);
    const astNode = (0, plugin_helpers_1.getCachedDocumentNodeFromSchema)(schema);
    const visitorResult = (0, plugin_helpers_1.oldVisit)(astNode, { leave: visitor });
    const header = visitor.objectIdImport;
    return [header, ...visitorResult.definitions.filter(d => typeof d === 'string')].join('\n');
};
exports.plugin = plugin;
exports.DIRECTIVES = (0, graphql_tag_1.default) `
  directive @${config_js_1.Directives.UNION}(discriminatorField: String, additionalFields: [AdditionalEntityFields]) on UNION
  directive @${config_js_1.Directives.ABSTRACT_ENTITY}(discriminatorField: String!, additionalFields: [AdditionalEntityFields]) on INTERFACE
  directive @${config_js_1.Directives.ENTITY}(embedded: Boolean, additionalFields: [AdditionalEntityFields]) on OBJECT
  directive @${config_js_1.Directives.COLUMN}(overrideType: String) on FIELD_DEFINITION
  directive @${config_js_1.Directives.ID} on FIELD_DEFINITION
  directive @${config_js_1.Directives.LINK}(overrideType: String) on FIELD_DEFINITION
  directive @${config_js_1.Directives.EMBEDDED} on FIELD_DEFINITION
  directive @${config_js_1.Directives.MAP}(path: String!) on FIELD_DEFINITION
  # Inputs
  input AdditionalEntityFields {
    path: String
    type: String
  }
`;
exports.addToSchema = exports.DIRECTIVES;
const validate = async (schema, documents, config, outputFile) => {
    if ((0, path_1.extname)(outputFile) !== '.ts' && (0, path_1.extname)(outputFile) !== '.tsx') {
        throw new Error(`Plugin "typescript-mongodb" requires extension to be ".ts" or ".tsx"!`);
    }
};
exports.validate = validate;
